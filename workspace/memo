    mp_pose = mp.solutions.pose
    pose = mp_pose.Pose(
        #upper_body_only=True,
        model_complexity=1,
        enable_segmentation=True,
        min_detection_confidence=0.5,
        #min_tracking_confidence=0.5,
    )
pose_results = pose.process(frame_RGB)

pose_results.pose_landmarks is not None:
        mp_drawing.draw_landmarks(
            frame,
            pose_results.pose_landmarks,
            mp_pose.POSE_CONNECTIONS,
            landmark_drawing_spec=mp.solutions.drawing_styles.get_default_pose_landmarks_style())


def videoPlay():
    while True:
        videoPath = input("読み込む動画ファイルへのパスを入力") # C:\Users\root\Desktop\hisa_reserch\hand_motion_search\video\aiueo.mp4
        cap = cv2.VideoCapture(videoPath)
        if (cap.isOpened()== False):  
            print("指定したパスのファイルを開けません") 
        else:
            break
        

    fps = int(cap.get(cv2.CAP_PROP_FPS))                    # カメラのFPSを取得
    w = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))              # カメラの横幅を取得
    h = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))             # カメラの縦幅を取得
    totalFrameCount = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))

    print("fps:{}".format(fps))
    print("width:{}".format(w))
    print("height:{}".format(h))
    print("total frame:{}".format(totalFrameCount))
    
    frameSp = 10
    print("Frame spacing to cut:{}".format(frameSp))

    input("Start with keystroke")
    while(True):      
        time.sleep(1/fps) # 再生速度制御
        ret, frame = cap.read()

        #frame_RGB = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        if ret == True:
            cv2.imshow("movie", frame)
            #cv2.moveWindow("movie", 0, 0)
            #cv2.flip(frame, 1)
        else:
            cap.set(cv2.CAP_PROP_POS_FRAMES, 0) # 繰り返し再生
                
        key = cv2.waitKey(1)
        if key & 0xFF == ord('q'):
            print("pushed [q] ksey")
            break
        
    cap.release()

 mp_drawing.draw_landmarks(
                            image=frame,
                            landmark_list=landmarks_hand,
                            connections=mp_hands.HAND_CONNECTIONS,
                            landmark_drawing_spec=drawing_spec,
                            connection_drawing_spec=drawing_spec) # 特徴点の描画